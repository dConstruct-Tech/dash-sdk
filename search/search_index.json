{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dConstruct d.ASH SDK The dConstruct d.ASH SDK is a cross-platform library for autonomous robot navigation. Use the d.ASH SDK to develop applications for your own Spot from Boston Dynamics or any other robot you wish. This section of the d.ASH SDK documentation provides details about the components of the SDK. Component Description d.ASH Server The d.ASH server acts as the main server responsible for sending control commands to the robot. At the same time, the d.ASH server also broadcasts secured data to any given remote systems. d.ASH Autonomy Engine The d.ASH Autonomy Engine is the autonomy backend code that runs on the edge of the robot. It empowers the robot with robust multi-terrain (indoor and outdoor) autonomous navigation capabilities. It handles secure communication between automony engine and the remote autonomy controller. d.ASH Autonomy Controller The d.ASH autonomy controller is the GUI (graphical user interface) for the d.ASH autonomy engine. It enable users to monitor and have full remote control of autonomy by allowing users to plot waypoints and activate autonomy on a fleet of robots. Stream real-time data via a secure connection between robots and the controller using 4G or 5G. If you decide to use your own custom GUI in place of the d.ASH autonomy controller, or you do not want to run autonomy, you will still need to implement the d.ASH server and the d.ASH autonomy engine to operate your robot.","title":"Introduction"},{"location":"#dconstruct-dash-sdk","text":"The dConstruct d.ASH SDK is a cross-platform library for autonomous robot navigation. Use the d.ASH SDK to develop applications for your own Spot from Boston Dynamics or any other robot you wish. This section of the d.ASH SDK documentation provides details about the components of the SDK. Component Description d.ASH Server The d.ASH server acts as the main server responsible for sending control commands to the robot. At the same time, the d.ASH server also broadcasts secured data to any given remote systems. d.ASH Autonomy Engine The d.ASH Autonomy Engine is the autonomy backend code that runs on the edge of the robot. It empowers the robot with robust multi-terrain (indoor and outdoor) autonomous navigation capabilities. It handles secure communication between automony engine and the remote autonomy controller. d.ASH Autonomy Controller The d.ASH autonomy controller is the GUI (graphical user interface) for the d.ASH autonomy engine. It enable users to monitor and have full remote control of autonomy by allowing users to plot waypoints and activate autonomy on a fleet of robots. Stream real-time data via a secure connection between robots and the controller using 4G or 5G. If you decide to use your own custom GUI in place of the d.ASH autonomy controller, or you do not want to run autonomy, you will still need to implement the d.ASH server and the d.ASH autonomy engine to operate your robot.","title":"dConstruct d.ASH SDK"},{"location":"dash-auto/UE-client/","text":"d.ASH Autonomy Controller As mentioned previously, the d.ASH autonomy controller is a GUI (graphical user interface) for the d.ASH SDK. It allows users to plot waypoints for autonomous navigation on maps, tracking and monitoring path planning. This section of the d.ASH SDK documentation provides details about setting up the d.ASH autonomy controller, including information on its respective components. d.ASH Autonomy Controller Description Pair d.C Pilot with d.ASH Autonomy Controller for remote autonomous operations. You'll be able to generate high quality real time 3D maps or launch point and click waypoint based missions. 1.1 Main Components Component Description (1) Main toolbar : Used to open other menus. (2) Slider : Used to move floor grid up and down. 3) Access mode : Used switch to mouse/keyboard mode. (3) (a) Navigation : The default mode uses the keys WASD to move camera and right click the mouse to zoom/tilt the camera. (3) (b) Waypoint creation : Used for adding waypoints to routes. (4) Floor grid 1.2 Login Component Description The login icon allow dConstruct users to log into the d.ASH autonomy controller using their cloud admin credentials. 1.3 Robot Connection The robot connection icon allow users to connect/disconnect their respective robots to the d.ASH autonomy controller. Component Description (1) Online pannel : Select from a list of robots that are online and ready to be used to connect to. (2) Connected pannel : Select from a list of robots that you have connected to in the client to manipulate. (3) Add button : Press to connect to the robot selected in the online list to add the robot to the connected list. (4) Minus button : Press to disconnect from a robot in the connected list. When users first start the d.ASH SDK, they need to give an initial estimation of the robot's post on the map by configuring its init pose . It tells the robot where its rough initial position is. To initialize init pose , draw the orange arrow by left clicking and drag the mouse on the floor grid. 1.4 Routes The routes icon allow users to set routes for the robot to follow using waypoints. Add/remove waypoints to build your own custom routes. 1.4.1 Route Controls Component Description (1) Route name pannel : Enter route name to add. (2) Add button : Click to add route of given name. (3) Route selection pannel : Click to select a route. (4) Minus button : Press to disconnect from a robot in the connected list. (5) Waypoint button : Click to add waypoints to selected route. (6) Load/save button : Load/save all routes. (7) Segment pannel : Use keypad \u00b1 to increment/decrement segment number. 1.4.2 Setting Up Routes Component Description To make a selected robot follow a selected route, add waypoints by clicking on the grid. Use WASD and right-click on the mouse to manipulate the view. Once the waypoints have been set, exit waypoint mode by middle clicking the mouse. On the other hand, to remove a waypoint, click on the waypoint (selected waypoint change to the color orange), and press the delete ket to remove. You can also adjust the elevation of the grid by pressing the key ctrl and the mouse scroll moving the floor grid in waypoint mode. A waypoint is created when you click on grid, so, to create elevated waypoints, move grid up/down and then click. 1.5 Map Settings The map settings icon allow users to adjust highpass, lowpass, UV Scale, and UV offset settings to customise the visuals of your map. Component Description Low pass slider : Voxels below this value is visible. Voxels in maps have elevation, and by lowering the low pass, voxels above the low pass will be cropped. Notice that the ceiling voxels have now been cropped by reducing the low pass. 1.6 Layer Visibility Component Description The layer visibility icon allow users to toggle the visibility of various items on the map. 1.7 Load Scans The load scans icon allow users to preview scans from the d.ASH Pack. Component Description (1) Vox downsample size pannel : Select your down sample size (in metres). A large value means lower quality, but faster loading. (2) Point clouds button : Pick loaded point clouds to toggle translucency.. Load scans in translucent mode.","title":"1.0 d.ASH Autonomy Controller"},{"location":"dash-auto/UE-client/#dash-autonomy-controller","text":"As mentioned previously, the d.ASH autonomy controller is a GUI (graphical user interface) for the d.ASH SDK. It allows users to plot waypoints for autonomous navigation on maps, tracking and monitoring path planning. This section of the d.ASH SDK documentation provides details about setting up the d.ASH autonomy controller, including information on its respective components. d.ASH Autonomy Controller Description Pair d.C Pilot with d.ASH Autonomy Controller for remote autonomous operations. You'll be able to generate high quality real time 3D maps or launch point and click waypoint based missions.","title":"d.ASH Autonomy Controller"},{"location":"dash-auto/UE-client/#11-main-components","text":"Component Description (1) Main toolbar : Used to open other menus. (2) Slider : Used to move floor grid up and down. 3) Access mode : Used switch to mouse/keyboard mode. (3) (a) Navigation : The default mode uses the keys WASD to move camera and right click the mouse to zoom/tilt the camera. (3) (b) Waypoint creation : Used for adding waypoints to routes. (4) Floor grid","title":"1.1 Main Components"},{"location":"dash-auto/UE-client/#12-login","text":"Component Description The login icon allow dConstruct users to log into the d.ASH autonomy controller using their cloud admin credentials.","title":"1.2 Login"},{"location":"dash-auto/UE-client/#13-robot-connection","text":"The robot connection icon allow users to connect/disconnect their respective robots to the d.ASH autonomy controller. Component Description (1) Online pannel : Select from a list of robots that are online and ready to be used to connect to. (2) Connected pannel : Select from a list of robots that you have connected to in the client to manipulate. (3) Add button : Press to connect to the robot selected in the online list to add the robot to the connected list. (4) Minus button : Press to disconnect from a robot in the connected list. When users first start the d.ASH SDK, they need to give an initial estimation of the robot's post on the map by configuring its init pose . It tells the robot where its rough initial position is. To initialize init pose , draw the orange arrow by left clicking and drag the mouse on the floor grid.","title":"1.3 Robot Connection"},{"location":"dash-auto/UE-client/#14-routes","text":"The routes icon allow users to set routes for the robot to follow using waypoints. Add/remove waypoints to build your own custom routes.","title":"1.4 Routes"},{"location":"dash-auto/UE-client/#141-route-controls","text":"Component Description (1) Route name pannel : Enter route name to add. (2) Add button : Click to add route of given name. (3) Route selection pannel : Click to select a route. (4) Minus button : Press to disconnect from a robot in the connected list. (5) Waypoint button : Click to add waypoints to selected route. (6) Load/save button : Load/save all routes. (7) Segment pannel : Use keypad \u00b1 to increment/decrement segment number.","title":"1.4.1 Route Controls"},{"location":"dash-auto/UE-client/#142-setting-up-routes","text":"Component Description To make a selected robot follow a selected route, add waypoints by clicking on the grid. Use WASD and right-click on the mouse to manipulate the view. Once the waypoints have been set, exit waypoint mode by middle clicking the mouse. On the other hand, to remove a waypoint, click on the waypoint (selected waypoint change to the color orange), and press the delete ket to remove. You can also adjust the elevation of the grid by pressing the key ctrl and the mouse scroll moving the floor grid in waypoint mode. A waypoint is created when you click on grid, so, to create elevated waypoints, move grid up/down and then click.","title":"1.4.2 Setting Up Routes"},{"location":"dash-auto/UE-client/#15-map-settings","text":"The map settings icon allow users to adjust highpass, lowpass, UV Scale, and UV offset settings to customise the visuals of your map. Component Description Low pass slider : Voxels below this value is visible. Voxels in maps have elevation, and by lowering the low pass, voxels above the low pass will be cropped. Notice that the ceiling voxels have now been cropped by reducing the low pass.","title":"1.5 Map Settings"},{"location":"dash-auto/UE-client/#16-layer-visibility","text":"Component Description The layer visibility icon allow users to toggle the visibility of various items on the map.","title":"1.6 Layer Visibility"},{"location":"dash-auto/UE-client/#17-load-scans","text":"The load scans icon allow users to preview scans from the d.ASH Pack. Component Description (1) Vox downsample size pannel : Select your down sample size (in metres). A large value means lower quality, but faster loading. (2) Point clouds button : Pick loaded point clouds to toggle translucency.. Load scans in translucent mode.","title":"1.7 Load Scans"},{"location":"dc-pilot/pilot-guide/","text":"DC Pilot Client The dC pilot is a GUI (graphical user interface) for the d.ASH SDK. It encompasses interactive visual components for you to control your robot both manually and autonomously. Operate your robots safely and precisely, from any location with our reliable and high-performance BVLOS (Beyond Vision Line of Sight) System with high quality video streams and responsive controls. This section of the d.ASH SDK documentation provides details about using the d.C Pilot Client. 1.1 Introduction The pilot client allows you to operate your robots safely and precisely, from any location via its high-performance BVLOS (Beyond Vision Line of Sight) system. It is also equipped with high quality video streams and responsive controls for seamless naviation. The system can also be used for fleet management, to discover, monitor and control multiple robots anytime, anywhere with real time video streaming and data collection. The vision auto-drive is another key feature of the d.C Pilot, using machine learning and computer vision to analyze and understand your robot's surroundings. This allows you to then plot and navigate complex, unstructured environments using just cameras. Some requirements before starting the d.C Pilot are: Nvidia GPU enabled PC Joystick connected to the PC 1.2 Main Controls Tutorial To start the robot from rest, apply pressure on the joystick. To stop the robot from moving, release your hold on the joystick. To move the robot forwards , push front on the joystick. To move the robot backwards , pull back on the joystick. To turn the robot to the left , tilt left on the joystick. To turn the robot to the right , tilt right on the joystick. To get the robot to stand or sit , click the stand or sit button under the Basic Control panel on the right side of the main screen. 1.3 Control Pannel Control Pannel (1) Unmute the microphone to allow dual-communication between the pilot client and the robot. (2) Toggle between audio to broadcast speakers. (3) Record videos in mp4 format. (4) Upload/download video recordings. (5) Configure settings for your preference ie. night mode. (6) Broadcast live video streaming using eith a RTSP server or an HSL server. 1.4 Basic Control Component Description (1) Monitor the joystick position with respect to your robot. Control the robot by pushing further on the joystick. (2) Adjust the cruise control speed using the slider control or if your joystick has a secondary lever, push the lever to activate. (3) Activate auto-drive for your robot to switch to Smart AI Assisted Cruise Autonomy. - Use the spacebar shortcut key to activate auto-drive. - Use the z shortcut key for your robot to take the next few possible left turns. - Use the x shortcut key for your robot to return to forward position after turning left or right. - Use the c shortcut key for your robot to take the next few possible right turns. 1.5 Cameras Component Description (1) Select from a list of cameras onboard Spot, which are automatically detected by the pilot client. (2) Adjust the order of cameras for a wider view scope. Ticking the flipped settings will adjust the camera orientation. (3) Activate human tracking for people detection and labelling.","title":"1.0 d.ASH Pilot Client"},{"location":"dc-pilot/pilot-guide/#dc-pilot-client","text":"The dC pilot is a GUI (graphical user interface) for the d.ASH SDK. It encompasses interactive visual components for you to control your robot both manually and autonomously. Operate your robots safely and precisely, from any location with our reliable and high-performance BVLOS (Beyond Vision Line of Sight) System with high quality video streams and responsive controls. This section of the d.ASH SDK documentation provides details about using the d.C Pilot Client.","title":"DC Pilot Client"},{"location":"dc-pilot/pilot-guide/#11-introduction","text":"The pilot client allows you to operate your robots safely and precisely, from any location via its high-performance BVLOS (Beyond Vision Line of Sight) system. It is also equipped with high quality video streams and responsive controls for seamless naviation. The system can also be used for fleet management, to discover, monitor and control multiple robots anytime, anywhere with real time video streaming and data collection. The vision auto-drive is another key feature of the d.C Pilot, using machine learning and computer vision to analyze and understand your robot's surroundings. This allows you to then plot and navigate complex, unstructured environments using just cameras. Some requirements before starting the d.C Pilot are: Nvidia GPU enabled PC Joystick connected to the PC","title":"1.1 Introduction"},{"location":"dc-pilot/pilot-guide/#12-main-controls","text":"Tutorial To start the robot from rest, apply pressure on the joystick. To stop the robot from moving, release your hold on the joystick. To move the robot forwards , push front on the joystick. To move the robot backwards , pull back on the joystick. To turn the robot to the left , tilt left on the joystick. To turn the robot to the right , tilt right on the joystick. To get the robot to stand or sit , click the stand or sit button under the Basic Control panel on the right side of the main screen.","title":"1.2 Main Controls"},{"location":"dc-pilot/pilot-guide/#13-control-pannel","text":"Control Pannel (1) Unmute the microphone to allow dual-communication between the pilot client and the robot. (2) Toggle between audio to broadcast speakers. (3) Record videos in mp4 format. (4) Upload/download video recordings. (5) Configure settings for your preference ie. night mode. (6) Broadcast live video streaming using eith a RTSP server or an HSL server.","title":"1.3 Control Pannel"},{"location":"dc-pilot/pilot-guide/#14-basic-control","text":"Component Description (1) Monitor the joystick position with respect to your robot. Control the robot by pushing further on the joystick. (2) Adjust the cruise control speed using the slider control or if your joystick has a secondary lever, push the lever to activate. (3) Activate auto-drive for your robot to switch to Smart AI Assisted Cruise Autonomy. - Use the spacebar shortcut key to activate auto-drive. - Use the z shortcut key for your robot to take the next few possible left turns. - Use the x shortcut key for your robot to return to forward position after turning left or right. - Use the c shortcut key for your robot to take the next few possible right turns.","title":"1.4 Basic Control"},{"location":"dc-pilot/pilot-guide/#15-cameras","text":"Component Description (1) Select from a list of cameras onboard Spot, which are automatically detected by the pilot client. (2) Adjust the order of cameras for a wider view scope. Ticking the flipped settings will adjust the camera orientation. (3) Activate human tracking for people detection and labelling.","title":"1.5 Cameras"},{"location":"getting-started/config-connect/","text":"Configuring Sensors 2.1 Velodyne Driver 2.1.1 Setting Up on Sensor By default, the Velodyne LIDAR sensor IP address is factory set on default value 192.168.1.201 . The d.ASH SDK will assume the default Velodyne IP address. 2.1.2 Setting Up on Personal Computer You'll need to configure a static IP address for your computer to use an address within the range 192.168.1.XXX where XXX may be any integer from 2 to 254, except 201 (which is the LIDAR\u2019s IP). For example, an appropriate static IP address for your compute could be 192.168.1.100 . 2.1.3 Testing Velodyne Sensors Now, let's test your lidar sensors. To test the Velodyne VLP-16 lidar sensor, run the following command: cd dash_sdk/launch roslaunch autonomy_velodyne.launch Finally, to check if the ROS messages are published correctly, in another terminal, run the following command: rostopic echo /velodyne_points 2.2 Ouster Driver 2.2.1 Setting Up on Sensor By default, the Ouster LIDAR sensor IP address is factory set on your IPv6/IPv4 link-local address. The addresses lie within the block 169.254.0.0 to 169.254.255.255 . To change the static IP address for Ouster, refer to the Ouster Documentation . It is recommended to set up your own static IP address. 2.2.2 Setting Up on Personal Computer You'll need to configure a static IP address for your computer to use an address within the range 192.0.2.XXX where XXX may be any integer from 2 to 254. For example, an appropriate static IP address for your compute could be 192.0.2.123 . 2.1.3 Testing Ouster Sensors To test the Ouster OS1-32 lidar sensor, run the following command: cd dash_sdk/launch roslaunch autonomy_ouster.launch Finally, to check if the ROS messages are published correctly, in another terminal, run the following command: rostopic echo /velodyne_points","title":"2.0 Configuring Sensors"},{"location":"getting-started/config-connect/#configuring-sensors","text":"","title":"Configuring Sensors"},{"location":"getting-started/config-connect/#21-velodyne-driver","text":"","title":"2.1 Velodyne Driver"},{"location":"getting-started/config-connect/#211-setting-up-on-sensor","text":"By default, the Velodyne LIDAR sensor IP address is factory set on default value 192.168.1.201 . The d.ASH SDK will assume the default Velodyne IP address.","title":"2.1.1 Setting Up on Sensor"},{"location":"getting-started/config-connect/#212-setting-up-on-personal-computer","text":"You'll need to configure a static IP address for your computer to use an address within the range 192.168.1.XXX where XXX may be any integer from 2 to 254, except 201 (which is the LIDAR\u2019s IP). For example, an appropriate static IP address for your compute could be 192.168.1.100 .","title":"2.1.2 Setting Up on Personal Computer"},{"location":"getting-started/config-connect/#213-testing-velodyne-sensors","text":"Now, let's test your lidar sensors. To test the Velodyne VLP-16 lidar sensor, run the following command: cd dash_sdk/launch roslaunch autonomy_velodyne.launch Finally, to check if the ROS messages are published correctly, in another terminal, run the following command: rostopic echo /velodyne_points","title":"2.1.3 Testing Velodyne Sensors"},{"location":"getting-started/config-connect/#22-ouster-driver","text":"","title":"2.2 Ouster Driver"},{"location":"getting-started/config-connect/#221-setting-up-on-sensor","text":"By default, the Ouster LIDAR sensor IP address is factory set on your IPv6/IPv4 link-local address. The addresses lie within the block 169.254.0.0 to 169.254.255.255 . To change the static IP address for Ouster, refer to the Ouster Documentation . It is recommended to set up your own static IP address.","title":"2.2.1 Setting Up on Sensor"},{"location":"getting-started/config-connect/#222-setting-up-on-personal-computer","text":"You'll need to configure a static IP address for your computer to use an address within the range 192.0.2.XXX where XXX may be any integer from 2 to 254. For example, an appropriate static IP address for your compute could be 192.0.2.123 .","title":"2.2.2 Setting Up on Personal Computer"},{"location":"getting-started/config-connect/#213-testing-ouster-sensors","text":"To test the Ouster OS1-32 lidar sensor, run the following command: cd dash_sdk/launch roslaunch autonomy_ouster.launch Finally, to check if the ROS messages are published correctly, in another terminal, run the following command: rostopic echo /velodyne_points","title":"2.1.3 Testing Ouster Sensors"},{"location":"getting-started/config-spot/","text":"Configuring Spot This section of the d.ASH SDK documentation provides details about setting up Spot with the d.ASH SDK. To configure Spot, you will need to set up on the robot itself and on your personal computer. For further enquiries of setting up Spot, follow Boston Dynamics Documentation . 1.1 Setting Up On Spot By default, user and admin credentials are printed on the label of the robot's battery compartment. Otherwise, you can create your own account through the admin console by creating a user with admin privileges. Check out Boston Dynamics Documentation for more information on how to do so. Remember your credentials! Remember your Spot credentials as you will need those same credentials to set up the next section on your personal computer. 1.2 Setting Up On PC By default, the Spot robot IP address is 10.0.0.3 . If you have more than one Spot robot, refer to the Boston Dynamics Documentation to use the admin console to change the default IP of additional robots to avoid address conflicts. You'll need to configure a static IP address for your computer to use an address within the range 10.0.0.X where X may be any integer from 2 to 254, except 3 (which is the Spot's IP). For example, an appropriate static IP address for your compute could be 10.0.0.100 . You will then be asked to enter a valid admin or operator username and password. These credentials will match the credentials on Spot's battery compartment.","title":"1.0 Configuring Spot"},{"location":"getting-started/config-spot/#configuring-spot","text":"This section of the d.ASH SDK documentation provides details about setting up Spot with the d.ASH SDK. To configure Spot, you will need to set up on the robot itself and on your personal computer. For further enquiries of setting up Spot, follow Boston Dynamics Documentation .","title":"Configuring Spot"},{"location":"getting-started/config-spot/#11-setting-up-on-spot","text":"By default, user and admin credentials are printed on the label of the robot's battery compartment. Otherwise, you can create your own account through the admin console by creating a user with admin privileges. Check out Boston Dynamics Documentation for more information on how to do so. Remember your credentials! Remember your Spot credentials as you will need those same credentials to set up the next section on your personal computer.","title":"1.1 Setting Up On Spot"},{"location":"getting-started/config-spot/#12-setting-up-on-pc","text":"By default, the Spot robot IP address is 10.0.0.3 . If you have more than one Spot robot, refer to the Boston Dynamics Documentation to use the admin console to change the default IP of additional robots to avoid address conflicts. You'll need to configure a static IP address for your computer to use an address within the range 10.0.0.X where X may be any integer from 2 to 254, except 3 (which is the Spot's IP). For example, an appropriate static IP address for your compute could be 10.0.0.100 . You will then be asked to enter a valid admin or operator username and password. These credentials will match the credentials on Spot's battery compartment.","title":"1.2 Setting Up On PC"},{"location":"getting-started/dash-eng/","text":"Interfacing d.ASH Autonomy Engine with ROS This section of the d.ASH SDK documentation provides details about using ROS with the d.ASH autonomy engine. Described below are ROS topics, along with their type and functionality. 4.1 Publications Topic Type Function /active_path nav_mgs/Path Returns current path being executed. /image sensor_msgs/Image Returns sensor image. /initial_pose geometry_msgs/PoseWithCovarianceStamped Returns initial pose estimate for localization. /localization_status std_msgs/String Returns status of localization certainty. /mcl_pose_marker visualization_msgs/Marker Returns current localization position. /nearest_wpts visualization_msgs/Marker Returns nearest waypoints for the robot to follow. /odom nav_msgs/Odometry Returns odometry reading. /original_path nav_msgs/Path Returns original path before processing. /particle_array geometry_msgs/PoseArray Returns localization particle certainty. /tracking_wpt std_msgs/Float32MultiArray Returns nearest waypoints for the robot to follow. 4.2 Subscriptions Topic Type Function /cmd_vel geometry_msgs/Twist Accepts manual command velocity. /imu sensor_msgs/Imu Accepts imu sensor data. /initial_pose geometry_msgs/PoseWithCovarianceStamped Accepts initial pose estimate for localization. /joy sensor_msgs/Joy Accepts joystick message. /move_base_simple/goal geometry_msgs/PoseStamped Accepts final goal from RVIZ. /odom nav_msgs/Odometry Accepts odometry reading. /lidar_points sensor_msgs/PointCloud2 Accepts lidar scan.","title":"4.0 d.ASH with ROS"},{"location":"getting-started/dash-eng/#interfacing-dash-autonomy-engine-with-ros","text":"This section of the d.ASH SDK documentation provides details about using ROS with the d.ASH autonomy engine. Described below are ROS topics, along with their type and functionality.","title":"Interfacing d.ASH Autonomy Engine with ROS"},{"location":"getting-started/dash-eng/#41-publications","text":"Topic Type Function /active_path nav_mgs/Path Returns current path being executed. /image sensor_msgs/Image Returns sensor image. /initial_pose geometry_msgs/PoseWithCovarianceStamped Returns initial pose estimate for localization. /localization_status std_msgs/String Returns status of localization certainty. /mcl_pose_marker visualization_msgs/Marker Returns current localization position. /nearest_wpts visualization_msgs/Marker Returns nearest waypoints for the robot to follow. /odom nav_msgs/Odometry Returns odometry reading. /original_path nav_msgs/Path Returns original path before processing. /particle_array geometry_msgs/PoseArray Returns localization particle certainty. /tracking_wpt std_msgs/Float32MultiArray Returns nearest waypoints for the robot to follow.","title":"4.1 Publications"},{"location":"getting-started/dash-eng/#42-subscriptions","text":"Topic Type Function /cmd_vel geometry_msgs/Twist Accepts manual command velocity. /imu sensor_msgs/Imu Accepts imu sensor data. /initial_pose geometry_msgs/PoseWithCovarianceStamped Accepts initial pose estimate for localization. /joy sensor_msgs/Joy Accepts joystick message. /move_base_simple/goal geometry_msgs/PoseStamped Accepts final goal from RVIZ. /odom nav_msgs/Odometry Accepts odometry reading. /lidar_points sensor_msgs/PointCloud2 Accepts lidar scan.","title":"4.2 Subscriptions"},{"location":"getting-started/map-loading/","text":"Map Loading This section of the d.ASH SDK documentation provides details about file organisation of autonomy maps for the d.ASH SDK. To load a new map, upload the autonomy map files in the folder maps found in /dash_sdk/.data/maps . Please ensure that the following files are in the folder: dash-sdk/ \u2514\u2500 .data/ \u2514\u2500 maps \u2514\u2500 <MAP_NAME>.png # 2D Autonomy Map \u2514\u2500 <MAP_NAME>.pcd # 3D Autonomy Map \u2514\u2500 <MAP_NAME>.json # Global Planner Configuration To activate the new map, ensure the map name in auto_config.json file matches <MAP_NAME> . For example: \"map_name\": \"outdoor_map\",","title":"3.0 Map Loading"},{"location":"getting-started/map-loading/#map-loading","text":"This section of the d.ASH SDK documentation provides details about file organisation of autonomy maps for the d.ASH SDK. To load a new map, upload the autonomy map files in the folder maps found in /dash_sdk/.data/maps . Please ensure that the following files are in the folder: dash-sdk/ \u2514\u2500 .data/ \u2514\u2500 maps \u2514\u2500 <MAP_NAME>.png # 2D Autonomy Map \u2514\u2500 <MAP_NAME>.pcd # 3D Autonomy Map \u2514\u2500 <MAP_NAME>.json # Global Planner Configuration To activate the new map, ensure the map name in auto_config.json file matches <MAP_NAME> . For example: \"map_name\": \"outdoor_map\",","title":"Map Loading"},{"location":"sdk-config/auto-config/","text":"Auto Configuration This section of the d.ASH SDK documentation provides details about the configuration file for the robot - auto_config.json - found in the folder \\dash-sdk\\configs . Information in this section includes variable and definitions to configure autonomy. 4.1 Config File { \"py_address\" : \"0.0.0.0:50051\" , \"ue_address\" : \"0.0.0.0:50052\" , \"ssl\" : true , \"motion_planner\" : true , \"localization\" : true , \"sim_mode\" : false , \"send_data_gui\" : true , \"camera\" : \"RealsenseCam\" , \"retrieveImg\" : false , \"map_name\" : \"office_lvl4\" , \"pc_topic\" : \"velodyne_points\" , \"odom_topic\" : \"odom\" , \"controller\" :{ \"linear_window\" : 0.5 , \"linear_min_v\" : 0.0 , \"linear_max_v\" : 0.8 , \"angular_max_w\" : 3.142 , \"linear_max_a\" : 1.0 , \"angular_max_a\" : 5.0 , \"robot_width\" : 0.4 , \"robot_length\" : 1.0 , \"obstacle_cost_gains\" : 3.0 , \"speed_cost_gains\" : 1.0 , \"goal_cost_gains\" : 4.0 , \"angular_speed_cost_scaling_factor\" : 0.1 , \"linear_num_window_steps\" : 50 , \"angular_num_window_steps\" : 30 , \"prediction_window\" : 5.0 , \"costmap_size\" : 20.0 , \"costmap_scale\" : 0.1 , \"max_pc_height\" : 0.2 , \"min_pc_height\" : - 0.5 , \"x_filter\" :[ - 0.2 , 0.2 ], \"y_filter\" :[ - 0.1 , 0.1 ], \"costmap_obs_inflation\" : 1.0 , \"occ_obs_deadzone\" : 0.2 , \"dt\" : 0.1 , \"visualise\" : false }, \"state_estimator\" :{ \"initial_x\" : - 7.7 , \"initial_y\" : - 14.5 , \"initial_z\" : 1.0 , \"initial_w\" : - 0.177 , \"kImuTopic\" : \"imu\" , \"kPoseTopic\" : \"mcl_pose\" , \"ktfUpdate\" : 0.02 , \"kStatusUpdate\" : 1.0 , \"kLoggingUpdate\" : 15.0 , \"kposeDiffmax\" : 5.0 , \"KUse_imu_ori\" : false , \"kBadCovThres\" : 2.0 , \"kGoodCovThres\" : 0.7 , \"kCovBadMax\" : 10 , \"kCovGoodtMax\" : 5 , \"kFilter_z\" : true , \"klimit_min\" : - 0.3 , \"klimit_max\" : 5.0 }, \"planner\" :{ \"lookAheadIndex\" : 15 , \"enable_self_rotate\" : false , \"self_rotation_speed\" : 0.5 , \"self_rotation_speed_final\" : 0.3 , \"dis_threshold\" : 0.5 , \"theta_threshold\" : 0.2 , \"cmd_Smoothing\" : true , } } 4.2 Definitions 4.2.1 Main Variable Definition py_address The address of the d.ASH server in the formal <IP>:<PORT> . ue_address The address of the GUI server in the formal <IP>:<PORT> . ssl Enables secure SSL messaging and encryption. motion_planner Enables autonomy motion planning. localization Enables robot localisation, returning users position and orientation in relation to map. sim_mode Enables Spot odometry retrieval. send_data_gui Enables ability to send data to GUI server for visualisation. camera Camera active for the current session to retrieve data ie. RealsenseCam, TestCam . retrieveImg Enables image retrieval. map_name Map name used for autonomy (as mentioned in File Organisation ). pc_topic ROS point cloud topic name for subscribing odom_topic ROS odometry topic name for subscribing. 4.2.2 Controller For the following parameters, ensure the value is within limits of the robot as per its documentation. Variable Definition linear_window Sets DWA (dynamic window approach) size. linear_min_v Sets minimum linear velocity for autonomy. linear_max_v Sets maximum linear velocity for autonomy. angular_max_w Sets maximum angular velocity for autonomy. linear_max_a Sets maximum linear acceleration for autonomy. angular_max_a Sets maximum angular acceleration for autonomy. robot_width Reflects width of robot. robot_length Reflects the length of robot. obstacle_cost_gains Sets weight for an obstacle course based on the weighted sum of the map. speed_cost_gains Sets weight for speed cost. goal_cost_gains Sets weight for goal cost. angular_speed_cost_scaling_factor Sets weight for angular velocity. Note that a higher value of the variable discourages the robot from turning. linear_num_window_steps Sets number of linear velocity values to consider. Note that a higher value of the variable slows down the computations. angular_num_window_steps Sets number of angular velocity values to consider. Note that a higher value of the variable slows down the computations. prediction_window Sets prediction horizion (in seconds). Note that a higher value of the variable slows down the computations. costmap_size Sets local costmap size (in meters). costmap_scale Sets scale to convert map from meter to pixels. max_pc_height Sets maximum point cloud height to be considered as an obstacle. min_pc_height Sets minimum point cloud height to be considered as an obstacle. Note that the point cloud height is measured from the center of the lidar. If the ground is detected, it will be considered as an obstacle. Therefore, set the minimum value to be above the ground. x_filter Sets vector of size 2 consisting the minimum and maximum x-value of point cloud to be removed. Do not remove too much from the point cloud filter as obstacles around the robot might not be considered. y_filter Sets vector of size 2 consisting the minimum and maximum y-value of point cloud to be removed. Do not remove too much from the point cloud filter as obstacles around the robot might not be considered. costmap_obs_inflation Sets inflation radius of obstacles to be considered in planning. Note that a higher value of the variable results in more conservative planning. occ_obs_deadzone Sets minimum distances from obstacles and robots for autonomy. dt Sets timestep. Note that a higher timestamp slows down the computation. visualise Enables visualisation of costmap. This is used only for debugging. 4.2.3 State Estimator Variable Definition initial_x Sets initialization of x-axis for localizaition (in meters). initial_y Sets initialization of y-axis for localizaition (in meters). initial_z Sets initialization of z-axis for localizaition (in meters). initial_w Sets initialization of orientation for localizaition. kImuTopic ROS IMU (Inertial Measurement Unit) topic name for subscribing. kPoseTopic Enables localization result. ktfUpdate Sets ROS tf publishing frequency. kStatusUpdate Sets localisation status of publishing frequency. kLoggingUpdate Sets data logging period. kposeDiffmax Sets the maximum distance between two consecutive pose estimation. KUse_imu_ori Enables IMU (Inertial Measurement Unit) or odom orientation for odometry estimation. If this variable is set to true, ensure kImuTopic is available. kBadCovThres Sets localization quality. kGoodCovThres Sets localization quality. kCovBadMax Sets localization quality. kCovGoodtMax Sets localization quality. kFilter_z Enables pass through filter application for localization. klimit_min Sets minimum range of pass through filter. klimit_max Sets maximum range of pass through filter. 4.2.4 Planner Variable Definition lookAheadIndexv Sets look-ahead index from the nearest waypoint for path to follow. Note that a lower index slows down the movement of the robot. Similarly, a higher index results in the robot not follow path properly. enable_self_rotate Enables one round of rotation around the robot itself before performing autonomy. This is to ensure that localisation is working before starting autonomy. self_rotation_speed Sets angular velocity of robot to turn around itself before performing autonomy (in radiants/second). self_rotation_speed_final Sets angular velocity of robot to turn around itself after performing autonomy (in radiants/second). This ensures that the final orientation of robot aligns with its goal. dis_threshold Sets maximum euclidean distance from the robot to the final goal for destination to be considered having reached its goal. Note that a smaller threshold discourages the robot from determing if it has reached its goal. theta_threshold Sets maximum orientation distance from the robot to the final goal for destination to be considered having reached its goal. Note that a smaller threshold discourages the robot from determing if it has reached its goal. cmd_Smoothing Enables smoothing control commands.","title":"4.0 Auto Configuration"},{"location":"sdk-config/auto-config/#auto-configuration","text":"This section of the d.ASH SDK documentation provides details about the configuration file for the robot - auto_config.json - found in the folder \\dash-sdk\\configs . Information in this section includes variable and definitions to configure autonomy.","title":"Auto Configuration"},{"location":"sdk-config/auto-config/#41-config-file","text":"{ \"py_address\" : \"0.0.0.0:50051\" , \"ue_address\" : \"0.0.0.0:50052\" , \"ssl\" : true , \"motion_planner\" : true , \"localization\" : true , \"sim_mode\" : false , \"send_data_gui\" : true , \"camera\" : \"RealsenseCam\" , \"retrieveImg\" : false , \"map_name\" : \"office_lvl4\" , \"pc_topic\" : \"velodyne_points\" , \"odom_topic\" : \"odom\" , \"controller\" :{ \"linear_window\" : 0.5 , \"linear_min_v\" : 0.0 , \"linear_max_v\" : 0.8 , \"angular_max_w\" : 3.142 , \"linear_max_a\" : 1.0 , \"angular_max_a\" : 5.0 , \"robot_width\" : 0.4 , \"robot_length\" : 1.0 , \"obstacle_cost_gains\" : 3.0 , \"speed_cost_gains\" : 1.0 , \"goal_cost_gains\" : 4.0 , \"angular_speed_cost_scaling_factor\" : 0.1 , \"linear_num_window_steps\" : 50 , \"angular_num_window_steps\" : 30 , \"prediction_window\" : 5.0 , \"costmap_size\" : 20.0 , \"costmap_scale\" : 0.1 , \"max_pc_height\" : 0.2 , \"min_pc_height\" : - 0.5 , \"x_filter\" :[ - 0.2 , 0.2 ], \"y_filter\" :[ - 0.1 , 0.1 ], \"costmap_obs_inflation\" : 1.0 , \"occ_obs_deadzone\" : 0.2 , \"dt\" : 0.1 , \"visualise\" : false }, \"state_estimator\" :{ \"initial_x\" : - 7.7 , \"initial_y\" : - 14.5 , \"initial_z\" : 1.0 , \"initial_w\" : - 0.177 , \"kImuTopic\" : \"imu\" , \"kPoseTopic\" : \"mcl_pose\" , \"ktfUpdate\" : 0.02 , \"kStatusUpdate\" : 1.0 , \"kLoggingUpdate\" : 15.0 , \"kposeDiffmax\" : 5.0 , \"KUse_imu_ori\" : false , \"kBadCovThres\" : 2.0 , \"kGoodCovThres\" : 0.7 , \"kCovBadMax\" : 10 , \"kCovGoodtMax\" : 5 , \"kFilter_z\" : true , \"klimit_min\" : - 0.3 , \"klimit_max\" : 5.0 }, \"planner\" :{ \"lookAheadIndex\" : 15 , \"enable_self_rotate\" : false , \"self_rotation_speed\" : 0.5 , \"self_rotation_speed_final\" : 0.3 , \"dis_threshold\" : 0.5 , \"theta_threshold\" : 0.2 , \"cmd_Smoothing\" : true , } }","title":"4.1 Config File"},{"location":"sdk-config/auto-config/#42-definitions","text":"","title":"4.2 Definitions"},{"location":"sdk-config/auto-config/#421-main","text":"Variable Definition py_address The address of the d.ASH server in the formal <IP>:<PORT> . ue_address The address of the GUI server in the formal <IP>:<PORT> . ssl Enables secure SSL messaging and encryption. motion_planner Enables autonomy motion planning. localization Enables robot localisation, returning users position and orientation in relation to map. sim_mode Enables Spot odometry retrieval. send_data_gui Enables ability to send data to GUI server for visualisation. camera Camera active for the current session to retrieve data ie. RealsenseCam, TestCam . retrieveImg Enables image retrieval. map_name Map name used for autonomy (as mentioned in File Organisation ). pc_topic ROS point cloud topic name for subscribing odom_topic ROS odometry topic name for subscribing.","title":"4.2.1 Main"},{"location":"sdk-config/auto-config/#422-controller","text":"For the following parameters, ensure the value is within limits of the robot as per its documentation. Variable Definition linear_window Sets DWA (dynamic window approach) size. linear_min_v Sets minimum linear velocity for autonomy. linear_max_v Sets maximum linear velocity for autonomy. angular_max_w Sets maximum angular velocity for autonomy. linear_max_a Sets maximum linear acceleration for autonomy. angular_max_a Sets maximum angular acceleration for autonomy. robot_width Reflects width of robot. robot_length Reflects the length of robot. obstacle_cost_gains Sets weight for an obstacle course based on the weighted sum of the map. speed_cost_gains Sets weight for speed cost. goal_cost_gains Sets weight for goal cost. angular_speed_cost_scaling_factor Sets weight for angular velocity. Note that a higher value of the variable discourages the robot from turning. linear_num_window_steps Sets number of linear velocity values to consider. Note that a higher value of the variable slows down the computations. angular_num_window_steps Sets number of angular velocity values to consider. Note that a higher value of the variable slows down the computations. prediction_window Sets prediction horizion (in seconds). Note that a higher value of the variable slows down the computations. costmap_size Sets local costmap size (in meters). costmap_scale Sets scale to convert map from meter to pixels. max_pc_height Sets maximum point cloud height to be considered as an obstacle. min_pc_height Sets minimum point cloud height to be considered as an obstacle. Note that the point cloud height is measured from the center of the lidar. If the ground is detected, it will be considered as an obstacle. Therefore, set the minimum value to be above the ground. x_filter Sets vector of size 2 consisting the minimum and maximum x-value of point cloud to be removed. Do not remove too much from the point cloud filter as obstacles around the robot might not be considered. y_filter Sets vector of size 2 consisting the minimum and maximum y-value of point cloud to be removed. Do not remove too much from the point cloud filter as obstacles around the robot might not be considered. costmap_obs_inflation Sets inflation radius of obstacles to be considered in planning. Note that a higher value of the variable results in more conservative planning. occ_obs_deadzone Sets minimum distances from obstacles and robots for autonomy. dt Sets timestep. Note that a higher timestamp slows down the computation. visualise Enables visualisation of costmap. This is used only for debugging.","title":"4.2.2 Controller"},{"location":"sdk-config/auto-config/#423-state-estimator","text":"Variable Definition initial_x Sets initialization of x-axis for localizaition (in meters). initial_y Sets initialization of y-axis for localizaition (in meters). initial_z Sets initialization of z-axis for localizaition (in meters). initial_w Sets initialization of orientation for localizaition. kImuTopic ROS IMU (Inertial Measurement Unit) topic name for subscribing. kPoseTopic Enables localization result. ktfUpdate Sets ROS tf publishing frequency. kStatusUpdate Sets localisation status of publishing frequency. kLoggingUpdate Sets data logging period. kposeDiffmax Sets the maximum distance between two consecutive pose estimation. KUse_imu_ori Enables IMU (Inertial Measurement Unit) or odom orientation for odometry estimation. If this variable is set to true, ensure kImuTopic is available. kBadCovThres Sets localization quality. kGoodCovThres Sets localization quality. kCovBadMax Sets localization quality. kCovGoodtMax Sets localization quality. kFilter_z Enables pass through filter application for localization. klimit_min Sets minimum range of pass through filter. klimit_max Sets maximum range of pass through filter.","title":"4.2.3 State Estimator"},{"location":"sdk-config/auto-config/#424-planner","text":"Variable Definition lookAheadIndexv Sets look-ahead index from the nearest waypoint for path to follow. Note that a lower index slows down the movement of the robot. Similarly, a higher index results in the robot not follow path properly. enable_self_rotate Enables one round of rotation around the robot itself before performing autonomy. This is to ensure that localisation is working before starting autonomy. self_rotation_speed Sets angular velocity of robot to turn around itself before performing autonomy (in radiants/second). self_rotation_speed_final Sets angular velocity of robot to turn around itself after performing autonomy (in radiants/second). This ensures that the final orientation of robot aligns with its goal. dis_threshold Sets maximum euclidean distance from the robot to the final goal for destination to be considered having reached its goal. Note that a smaller threshold discourages the robot from determing if it has reached its goal. theta_threshold Sets maximum orientation distance from the robot to the final goal for destination to be considered having reached its goal. Note that a smaller threshold discourages the robot from determing if it has reached its goal. cmd_Smoothing Enables smoothing control commands.","title":"4.2.4 Planner"},{"location":"sdk-config/register-bot/","text":"Register Payload Configuration This section of the d.ASH SDK documentation provides details about the configuration file for payload registration - register_payload_config - found in the folder \\dash-sdk\\configs . Information in this section includes variable and definitions to configure payload registration. 2.1 Config File { \"robot_name\" : \"<ROBOT_NAME>\" , \"robot_username\" : \"<DC_USERNAME>\" } 2.2 Definitions Variable Definition robotName Set the name of your robot - this can be any string. robotUserName Set the name of your username - this has to match your dConstruct cloud admin username.","title":"2.0 Register Payload Configuration"},{"location":"sdk-config/register-bot/#register-payload-configuration","text":"This section of the d.ASH SDK documentation provides details about the configuration file for payload registration - register_payload_config - found in the folder \\dash-sdk\\configs . Information in this section includes variable and definitions to configure payload registration.","title":"Register Payload Configuration"},{"location":"sdk-config/register-bot/#21-config-file","text":"{ \"robot_name\" : \"<ROBOT_NAME>\" , \"robot_username\" : \"<DC_USERNAME>\" }","title":"2.1 Config File"},{"location":"sdk-config/register-bot/#22-definitions","text":"Variable Definition robotName Set the name of your robot - this can be any string. robotUserName Set the name of your username - this has to match your dConstruct cloud admin username.","title":"2.2 Definitions"},{"location":"sdk-config/rest-config/","text":"d.ASH Service Configuration This section of the d.ASH SDK documentation provides details about the configuration file for the rest server - dash_service_config.json - found in the folder \\dash-sdk\\configs . Information in this section includes variable and definitions to configure the d.ASH service. 1.1 Config File { \"port\" : 3000 , \"cert_filename\" : \"./cert.pem\" , \"key_filename\" : \"./key.pem\" , \"dh_params_filename\" : \"\" , \"robot_register_native_cert\" : true , \"active_IP_idx\" : 1 , \"preferred_IP\" : \"10.8.0.5\" , \"run_cmds\" : { \"py_server\" : { \"cmd_str\" : \"python ./spot_server.py ./configs/dash-service-config.json <!TOKEN!>\" , \"cmd_path\" : \"C:/Users/dc/Documents/Projects/dc/dash_code/py_server\" } } } 1.2 Definitions 1.2.1 Main Variable Definition port Fixed port number. cert_filename Fixed certification filename. key_filename Fixed certification key filename. dh_params_filename Fixed parameter filename. robot_register_native_cert If you registed with register_bot_native, the data will be encrypted. Always set this variable to true. active_IP_idx Selects the IP address you will send to the backend cloud service for robot discovery. This is an integer index ( from 0 to N ), based on the IP addresses available on your system. When the rest service starts up, you should see a list. Set the value to the appropriate index you want. This index will map the the IP which the clients will try to connect to. preferred_IP Selects your preferred IP from the list of IPs. Specify the IP as a string in this case. 1.2.2 d.ASH Server Commands Variable Definition cmd_str Sets command to run d.ASH server. cmd_path Sets command path.","title":"1.0 d.ASH Service Configuration"},{"location":"sdk-config/rest-config/#dash-service-configuration","text":"This section of the d.ASH SDK documentation provides details about the configuration file for the rest server - dash_service_config.json - found in the folder \\dash-sdk\\configs . Information in this section includes variable and definitions to configure the d.ASH service.","title":"d.ASH Service Configuration"},{"location":"sdk-config/rest-config/#11-config-file","text":"{ \"port\" : 3000 , \"cert_filename\" : \"./cert.pem\" , \"key_filename\" : \"./key.pem\" , \"dh_params_filename\" : \"\" , \"robot_register_native_cert\" : true , \"active_IP_idx\" : 1 , \"preferred_IP\" : \"10.8.0.5\" , \"run_cmds\" : { \"py_server\" : { \"cmd_str\" : \"python ./spot_server.py ./configs/dash-service-config.json <!TOKEN!>\" , \"cmd_path\" : \"C:/Users/dc/Documents/Projects/dc/dash_code/py_server\" } } }","title":"1.1 Config File"},{"location":"sdk-config/rest-config/#12-definitions","text":"","title":"1.2 Definitions"},{"location":"sdk-config/rest-config/#121-main","text":"Variable Definition port Fixed port number. cert_filename Fixed certification filename. key_filename Fixed certification key filename. dh_params_filename Fixed parameter filename. robot_register_native_cert If you registed with register_bot_native, the data will be encrypted. Always set this variable to true. active_IP_idx Selects the IP address you will send to the backend cloud service for robot discovery. This is an integer index ( from 0 to N ), based on the IP addresses available on your system. When the rest service starts up, you should see a list. Set the value to the appropriate index you want. This index will map the the IP which the clients will try to connect to. preferred_IP Selects your preferred IP from the list of IPs. Specify the IP as a string in this case.","title":"1.2.1 Main"},{"location":"sdk-config/rest-config/#122-dash-server-commands","text":"Variable Definition cmd_str Sets command to run d.ASH server. cmd_path Sets command path.","title":"1.2.2 d.ASH Server Commands"},{"location":"sdk-config/robot-config/","text":"Robot Configuration This section of the d.ASH SDK documentation provides details about the configuration file for the robot - robot_config.json - found in the folder \\dash-sdk\\configs . Information in this section includes variable and definitions used to configure the d.ASH server. 3.1 Config File { \"server_address\" : \"localhost:50051\" , \"robot_hostname\" : \"192.168.80.3\" , \"username\" : \"<USERNAME>\" , \"cam_list\" : [ \"RealsenseCam\" ], \"payloads\" : [], \"data_state_log_folder\" : \"G:/Temp/logs\" , \"ssl\" : true , \"fast_server\" : false , \"fast_server_hostname\" : \"localhost:7777\" , \"secure_default_token\" : false , \"test_mode\" : true , \"with_audio\" : true , \"real_sense_config\" : { \"test\" : true , \"test_filenames\" : [ \"../../test_videos/nus_left.mp4\" , \"../../test_videos/nus_center.mp4\" , \"../../test_videos/nus_right.mp4\" ], \"flip_options\" : { \"0\" : [ false , false ], \"1\" : [ true , true ], \"2\" : [ false , false ] }, \"base_width\" : 640 , \"base_height\" : 480 , \"codec\" : \"video\" , \"width\" : 320 , \"height\" : 240 , \"bitrate\" : 3600000 } } 3.2 Definitions 3.2.1 Main Variable Definition server_address Sets address of the d.ASH server in <HOSTNAME>:<PORT> format. robot_hostname Sets hostname of the Spot to connect to robot's IP. username Sets username for d.ASH server credentials. cam_list Sets a list of cameras active for the current session. payloads Optional payloads list. data_state_log_folder Sets folder to write out the recorded msgpack data of the robot. ssl Enables secure SSL messaging and encryption. test_mode Enables the d.ASH server to enter into test mode. with_audio Enables audio streaming playback. 3.2.2 Intel RealSense Configuration Variable Definition test Enables simulation of camera streaming via provided custom mp4 video files specified as a list in test_filenames . test_filenames List of test files. flip_options Specify how each camera flips long the x-axis and y-axis following the format {\"index\" : [x-flip, y-flip]} . baseWidth Sets processing width of the camera stream. Note that a minimum baseWidth of 640 is required. baseHeight Sets the processing height of the camera stream. Note that a minimum baseHeight of 360 is required. codec Sets jpg/video options, with jpg being regular jpeg encoding and video using VP9 encoding. width Adjusts the final returned/resized width dimensions of the input camera stream. Video will be processed at this base resolution before being resized via width and height . Use these variables to change the actual processed resolution for power/efficiency considerations of the RealSense devices. height Adjusts the final returned/resized height dimensions of the input camera stream. Video will be processed at this base resolution before being resized via width and height . Use these variables to change the actual processed resolution for power/efficiency considerations of the RealSense devices. bitrate This is the quality of the video encoding. Note for HD Streaming, RealSense requires a high bitrate of 3600000.","title":"3.0 Robot Configuration"},{"location":"sdk-config/robot-config/#robot-configuration","text":"This section of the d.ASH SDK documentation provides details about the configuration file for the robot - robot_config.json - found in the folder \\dash-sdk\\configs . Information in this section includes variable and definitions used to configure the d.ASH server.","title":"Robot Configuration"},{"location":"sdk-config/robot-config/#31-config-file","text":"{ \"server_address\" : \"localhost:50051\" , \"robot_hostname\" : \"192.168.80.3\" , \"username\" : \"<USERNAME>\" , \"cam_list\" : [ \"RealsenseCam\" ], \"payloads\" : [], \"data_state_log_folder\" : \"G:/Temp/logs\" , \"ssl\" : true , \"fast_server\" : false , \"fast_server_hostname\" : \"localhost:7777\" , \"secure_default_token\" : false , \"test_mode\" : true , \"with_audio\" : true , \"real_sense_config\" : { \"test\" : true , \"test_filenames\" : [ \"../../test_videos/nus_left.mp4\" , \"../../test_videos/nus_center.mp4\" , \"../../test_videos/nus_right.mp4\" ], \"flip_options\" : { \"0\" : [ false , false ], \"1\" : [ true , true ], \"2\" : [ false , false ] }, \"base_width\" : 640 , \"base_height\" : 480 , \"codec\" : \"video\" , \"width\" : 320 , \"height\" : 240 , \"bitrate\" : 3600000 } }","title":"3.1 Config File"},{"location":"sdk-config/robot-config/#32-definitions","text":"","title":"3.2 Definitions"},{"location":"sdk-config/robot-config/#321-main","text":"Variable Definition server_address Sets address of the d.ASH server in <HOSTNAME>:<PORT> format. robot_hostname Sets hostname of the Spot to connect to robot's IP. username Sets username for d.ASH server credentials. cam_list Sets a list of cameras active for the current session. payloads Optional payloads list. data_state_log_folder Sets folder to write out the recorded msgpack data of the robot. ssl Enables secure SSL messaging and encryption. test_mode Enables the d.ASH server to enter into test mode. with_audio Enables audio streaming playback.","title":"3.2.1 Main"},{"location":"sdk-config/robot-config/#322-intel-realsense-configuration","text":"Variable Definition test Enables simulation of camera streaming via provided custom mp4 video files specified as a list in test_filenames . test_filenames List of test files. flip_options Specify how each camera flips long the x-axis and y-axis following the format {\"index\" : [x-flip, y-flip]} . baseWidth Sets processing width of the camera stream. Note that a minimum baseWidth of 640 is required. baseHeight Sets the processing height of the camera stream. Note that a minimum baseHeight of 360 is required. codec Sets jpg/video options, with jpg being regular jpeg encoding and video using VP9 encoding. width Adjusts the final returned/resized width dimensions of the input camera stream. Video will be processed at this base resolution before being resized via width and height . Use these variables to change the actual processed resolution for power/efficiency considerations of the RealSense devices. height Adjusts the final returned/resized height dimensions of the input camera stream. Video will be processed at this base resolution before being resized via width and height . Use these variables to change the actual processed resolution for power/efficiency considerations of the RealSense devices. bitrate This is the quality of the video encoding. Note for HD Streaming, RealSense requires a high bitrate of 3600000.","title":"3.2.2 Intel RealSense Configuration"},{"location":"setup/dash/","text":"Setting Up d.ASH As mentioned previously, the d.ASH consists of three main components - d.ASH server, d.ASH service, and d.ASH autonomy engine. This section of the d.ASH SDK documentation provides details about setting up the d.ASH components including compiling and testing. 4.1 Installing d.ASH Dependencies To install the remaining d.ASH dependencies using pip, the following desktop dependencies must be set up prior: Intel RealSense SDK 2.0 ROS Melodic on Ubuntu 18.04 FFmpeg and others If the above dependencies have been installed, proceed by running the following command to install the rest of the python packages: python3.7 config_libs.py Please ensure you are in the \\dash-sdk directory before running. Following the instructions prompted by the terminal to proceed with installation. 4.2 Setting up d.ASH Server To set up the d.ASH server, you will need to configure the d.ASH server configuration file - robot_config.json - located in the folder \\dash-sdk\\configs . dash-sdk/ \u2514\u2500 configs/ \u2514\u2500 robot_config.json \u2514\u2500 ... Follow the variable definitions for robot_config.json to set up the file correctly for the d.ASH server. Once robot_config.json has been set up, run the d.ASH server by executing the following command on your terminal: python3 .7 ./ dash_server . py robot_config . json 4.3 Setting up d.ASH Service To set up the d.ASH service, you will need to configure the d.ASH service configuration file - dash_service_config.json - located in the folder \\dash-sdk\\configs . dash-sdk/ \u2514\u2500 configs/ \u2514\u2500 dash_service_config.json \u2514\u2500 ... First, run runrest to see available IP address for your rest server: runrest Pick the index of the IP address you like and append it to the activeIPIdx variable in dash_service_config.json : \"activeIPIdx\" : 1, # where '1' is the chosen IP address index Then, you will need to set your preferredIP address, that is, the IP address for the computer onboard your robot. This IP address will have precedence over activeIPIdx . Similarly, replace the default IP address with your preferred IP address in dash_service_config.json : \"preferredIP\" : \"10.8.0.5\", # where '10.8.0.5' is the preferred IP address Ensure that the IP address of the onboard computer is within the same subnet by the remote client. Lastly, you will need to change the <PATH_OF_SDK> of cmdPath in dash_service_config.json : \"cmdPath\" : \"<PATH>\" To do this, use pwd to print your current working directory path and replace <PATH_OF_SDK> with the path printed. For example, if your current directory is /home/dash_sdk/py_server : \"cmdPath\" : \"/home/dash_sdk\" To test the d.ASH service, you'll need to run the d.ASH server by running the following command: ./ robot_rest < PATH_TO_SDK >/ configs / dash_service_config . json Now that your d.ASH service is running, you can use our d.ASH Pilot app. To launch the d.ASH Pilot app, simply search for it in your Windows search bar. Now, login to the system and connect to your robot to start controlling your robot. For more information on the d.ASH Pilot, refer to the d.ASH Pilot guide . 4.4 Setting up d.ASH Autonomy Engine To set up the d.ASH autonomy engine, you will need to configure the d.ASH autonomy configuration file - auto_config.json - located in the folder /dash-sdk/configs/ . dash-sdk/ \u2514\u2500 configs/ \u2514\u2500 auto_config.json \u2514\u2500 ... Follow the variable definitions for auto_config.json to set up the file correctly for the d.ASH autonomy engine. Once auto_config.json has been set up, test the d.ASH autonomy engine by run the executable below to start autonomy driver. Note to replace <PATH_TO_SDK> with your current working directory containing the d.ASH SDK: ./dash_autonomy <PATH_TO_SDK>/config/auto_config.json To find your current working directory, use pwd . For example, if your directory is /home/dash-sdk , you would run the following command to test d.ASH autonomy: ./dash_autonomy /home/dash-sdk/config/auto_config.json You will need to run d.ASH service first before running the d.ASH server and the d.ASH autonomy engine. On a seperate terminal, start a simple roslaunch test by running the following prompt, replacing <PATH_TO_SDK> with your current working directory containing the d.ASH SDK: cd \\launch roslaunch <PATH_TO_SDK>\\dash_sdk\\launch\\simple_joy.launch Launch files have been prepared for setup - either with the Velodyne VLP-16 lidar sensor or the Ouster OS1-32 lidar sensor. These lauch files can be found in under the \\dash-sdk\\launch folder. You can also create your own sensor launch files for your tests.","title":"4.0 Setting up d.ASH"},{"location":"setup/dash/#setting-up-dash","text":"As mentioned previously, the d.ASH consists of three main components - d.ASH server, d.ASH service, and d.ASH autonomy engine. This section of the d.ASH SDK documentation provides details about setting up the d.ASH components including compiling and testing.","title":"Setting Up d.ASH"},{"location":"setup/dash/#41-installing-dash-dependencies","text":"To install the remaining d.ASH dependencies using pip, the following desktop dependencies must be set up prior: Intel RealSense SDK 2.0 ROS Melodic on Ubuntu 18.04 FFmpeg and others If the above dependencies have been installed, proceed by running the following command to install the rest of the python packages: python3.7 config_libs.py Please ensure you are in the \\dash-sdk directory before running. Following the instructions prompted by the terminal to proceed with installation.","title":"4.1 Installing d.ASH Dependencies"},{"location":"setup/dash/#42-setting-up-dash-server","text":"To set up the d.ASH server, you will need to configure the d.ASH server configuration file - robot_config.json - located in the folder \\dash-sdk\\configs . dash-sdk/ \u2514\u2500 configs/ \u2514\u2500 robot_config.json \u2514\u2500 ... Follow the variable definitions for robot_config.json to set up the file correctly for the d.ASH server. Once robot_config.json has been set up, run the d.ASH server by executing the following command on your terminal: python3 .7 ./ dash_server . py robot_config . json","title":"4.2 Setting up d.ASH Server"},{"location":"setup/dash/#43-setting-up-dash-service","text":"To set up the d.ASH service, you will need to configure the d.ASH service configuration file - dash_service_config.json - located in the folder \\dash-sdk\\configs . dash-sdk/ \u2514\u2500 configs/ \u2514\u2500 dash_service_config.json \u2514\u2500 ... First, run runrest to see available IP address for your rest server: runrest Pick the index of the IP address you like and append it to the activeIPIdx variable in dash_service_config.json : \"activeIPIdx\" : 1, # where '1' is the chosen IP address index Then, you will need to set your preferredIP address, that is, the IP address for the computer onboard your robot. This IP address will have precedence over activeIPIdx . Similarly, replace the default IP address with your preferred IP address in dash_service_config.json : \"preferredIP\" : \"10.8.0.5\", # where '10.8.0.5' is the preferred IP address Ensure that the IP address of the onboard computer is within the same subnet by the remote client. Lastly, you will need to change the <PATH_OF_SDK> of cmdPath in dash_service_config.json : \"cmdPath\" : \"<PATH>\" To do this, use pwd to print your current working directory path and replace <PATH_OF_SDK> with the path printed. For example, if your current directory is /home/dash_sdk/py_server : \"cmdPath\" : \"/home/dash_sdk\" To test the d.ASH service, you'll need to run the d.ASH server by running the following command: ./ robot_rest < PATH_TO_SDK >/ configs / dash_service_config . json Now that your d.ASH service is running, you can use our d.ASH Pilot app. To launch the d.ASH Pilot app, simply search for it in your Windows search bar. Now, login to the system and connect to your robot to start controlling your robot. For more information on the d.ASH Pilot, refer to the d.ASH Pilot guide .","title":"4.3 Setting up d.ASH Service"},{"location":"setup/dash/#44-setting-up-dash-autonomy-engine","text":"To set up the d.ASH autonomy engine, you will need to configure the d.ASH autonomy configuration file - auto_config.json - located in the folder /dash-sdk/configs/ . dash-sdk/ \u2514\u2500 configs/ \u2514\u2500 auto_config.json \u2514\u2500 ... Follow the variable definitions for auto_config.json to set up the file correctly for the d.ASH autonomy engine. Once auto_config.json has been set up, test the d.ASH autonomy engine by run the executable below to start autonomy driver. Note to replace <PATH_TO_SDK> with your current working directory containing the d.ASH SDK: ./dash_autonomy <PATH_TO_SDK>/config/auto_config.json To find your current working directory, use pwd . For example, if your directory is /home/dash-sdk , you would run the following command to test d.ASH autonomy: ./dash_autonomy /home/dash-sdk/config/auto_config.json You will need to run d.ASH service first before running the d.ASH server and the d.ASH autonomy engine. On a seperate terminal, start a simple roslaunch test by running the following prompt, replacing <PATH_TO_SDK> with your current working directory containing the d.ASH SDK: cd \\launch roslaunch <PATH_TO_SDK>\\dash_sdk\\launch\\simple_joy.launch Launch files have been prepared for setup - either with the Velodyne VLP-16 lidar sensor or the Ouster OS1-32 lidar sensor. These lauch files can be found in under the \\dash-sdk\\launch folder. You can also create your own sensor launch files for your tests.","title":"4.4 Setting up d.ASH Autonomy Engine"},{"location":"setup/desktop-dep/","text":"Installing Dependencies on the Desktop While most of the d.ASH SDK build is hermetic, some system dependencies on the Desktop are required. This section of the d.ASH SDK documentation provides details for Intel RealSense SDK, Ubuntu, ROS Melodic, and FFmpeg installations. 1.1 Ubuntu Installation Ubuntu is a complete Linux operating system, which will serve as the primary platform for ROS. Currently, the d.ASH SDK only supports Linux Ubuntu 18.04 LTS for development and simulation from your workstation. Ubuntu Installation via Bootable USB If you would like to install Ubuntu via a bootable USB, you can do so for both Windows and MacOS . Ubuntu Installation via Virtual Machine If you would like to install Ubuntu via a virtual machine, you can do so using VirtualBox to kickstart your installation process. Once Ubuntu is installed, check that your version of Ubuntu has the release code 18.04 . Open the terminal and type the command: lsb_release - a This should print the following result: No LSB modules are available . Distributor ID : Ubuntu Description : Ubuntu 18.04.5 LTS Release : 18.04 Codename : bionic 1.2 ROS Installation ROS (Robot Operating System) is a open-source framework that helps researchers and developers build and reuse code between robotics applications. Currently, the d.ASH SDK only supports ROS Melodic for development and simulation from your workstation. Use Ubuntu to install ROS Melodic onto your computer system. Once ROS has been installed on your Linux system, check that your version of ROS is melodic . Open the terminal and type the command: rosversion - d This should print melodic . Otherwise, ensure that you installed the correct version of ROS - ROS Melodic . 1.3 Intel RealSense SDK Installation Intel RealSense is an RGB camera with channels designed for depth perception capabilities. The RealSense SDK 2.0 provides installation packages for Intel X86 / AMD64-based Debian distributions in dpkg format for Ubuntu 16/18/20 LTS. You'll be able to configure custom settings for any Intel RealSense cameras attached to the system to stream images to remote clients. Use Ubuntu to install Intel RealSense SDK 2.0 onto your computer system. 1.4 FFmpeg Installation FFmpeg is an open-source software project consisting of libraries and programs that handle video, audio, and other multimedia files and streams. To install FFmpeg, run the following commands on your Ubuntu terminal: sudo add-apt-repository ppa:jonathonf/ffmpeg-4 sudo apt-get install ffmpeg libavcodec-dev libavdevice-dev libavfilter-dev libavformat-dev libavresample-dev libavutil-dev libpostproc-dev libswresample-dev libswscale-dev libgoogle-glog-dev 1.5 Python Requirements The d.ASH SDK works with Python 3.7 . To properly run the server, you will also need to install a python package installer, pip. 1.5.1 apt-get Installed in Ubuntu and any Ubuntu-based Linux distribution, apt-get is tool for installing, upgrading, and cleaning packages. To set up the new environment, execute the following command on your Ubuntu terminal: sudo apt-get install -y python3.7-dev 1.5.2 Pip Installation Pip is a package installer for Python. The d.ASH SDK and the third-party packages used by many of its programming examples use pip to install. To install pip, run the following command on your Ubuntu terminal: sudo apt install python3 .7 python3 - pip python - pip python3 .7 - m pip instal -- upgrade pip","title":"1.0 Installing Desktop Dependencies"},{"location":"setup/desktop-dep/#installing-dependencies-on-the-desktop","text":"While most of the d.ASH SDK build is hermetic, some system dependencies on the Desktop are required. This section of the d.ASH SDK documentation provides details for Intel RealSense SDK, Ubuntu, ROS Melodic, and FFmpeg installations.","title":"Installing Dependencies on the Desktop"},{"location":"setup/desktop-dep/#11-ubuntu-installation","text":"Ubuntu is a complete Linux operating system, which will serve as the primary platform for ROS. Currently, the d.ASH SDK only supports Linux Ubuntu 18.04 LTS for development and simulation from your workstation. Ubuntu Installation via Bootable USB If you would like to install Ubuntu via a bootable USB, you can do so for both Windows and MacOS . Ubuntu Installation via Virtual Machine If you would like to install Ubuntu via a virtual machine, you can do so using VirtualBox to kickstart your installation process. Once Ubuntu is installed, check that your version of Ubuntu has the release code 18.04 . Open the terminal and type the command: lsb_release - a This should print the following result: No LSB modules are available . Distributor ID : Ubuntu Description : Ubuntu 18.04.5 LTS Release : 18.04 Codename : bionic","title":"1.1 Ubuntu Installation"},{"location":"setup/desktop-dep/#12-ros-installation","text":"ROS (Robot Operating System) is a open-source framework that helps researchers and developers build and reuse code between robotics applications. Currently, the d.ASH SDK only supports ROS Melodic for development and simulation from your workstation. Use Ubuntu to install ROS Melodic onto your computer system. Once ROS has been installed on your Linux system, check that your version of ROS is melodic . Open the terminal and type the command: rosversion - d This should print melodic . Otherwise, ensure that you installed the correct version of ROS - ROS Melodic .","title":"1.2 ROS Installation"},{"location":"setup/desktop-dep/#13-intel-realsense-sdk-installation","text":"Intel RealSense is an RGB camera with channels designed for depth perception capabilities. The RealSense SDK 2.0 provides installation packages for Intel X86 / AMD64-based Debian distributions in dpkg format for Ubuntu 16/18/20 LTS. You'll be able to configure custom settings for any Intel RealSense cameras attached to the system to stream images to remote clients. Use Ubuntu to install Intel RealSense SDK 2.0 onto your computer system.","title":"1.3 Intel RealSense SDK Installation"},{"location":"setup/desktop-dep/#14-ffmpeg-installation","text":"FFmpeg is an open-source software project consisting of libraries and programs that handle video, audio, and other multimedia files and streams. To install FFmpeg, run the following commands on your Ubuntu terminal: sudo add-apt-repository ppa:jonathonf/ffmpeg-4 sudo apt-get install ffmpeg libavcodec-dev libavdevice-dev libavfilter-dev libavformat-dev libavresample-dev libavutil-dev libpostproc-dev libswresample-dev libswscale-dev libgoogle-glog-dev","title":"1.4 FFmpeg Installation"},{"location":"setup/desktop-dep/#15-python-requirements","text":"The d.ASH SDK works with Python 3.7 . To properly run the server, you will also need to install a python package installer, pip.","title":"1.5 Python Requirements"},{"location":"setup/desktop-dep/#151-apt-get","text":"Installed in Ubuntu and any Ubuntu-based Linux distribution, apt-get is tool for installing, upgrading, and cleaning packages. To set up the new environment, execute the following command on your Ubuntu terminal: sudo apt-get install -y python3.7-dev","title":"1.5.1 apt-get"},{"location":"setup/desktop-dep/#152-pip-installation","text":"Pip is a package installer for Python. The d.ASH SDK and the third-party packages used by many of its programming examples use pip to install. To install pip, run the following command on your Ubuntu terminal: sudo apt install python3 .7 python3 - pip python - pip python3 .7 - m pip instal -- upgrade pip","title":"1.5.2 Pip Installation"},{"location":"setup/payload-reg/","text":"Payload Registration Before running the d.ASH SDK, please make sure that all of your credentials have been set up correctly. This means using the right username and the right password. This section of the d.ASH SDK documentation provides details about setting up credentials for the d.ASH server, your robot, and d.ASH autonomy. Files in this section can be found in the folder registration : dash-sdk/ \u2514\u2500 registration \u2514\u2500 set_spot_cred \u2514\u2500 register_payload \u2514\u2500 set_autonomy_cred 2.1 d.ASH Server Credentials To set up the local credentials for the d.ASH server, you will need to run the file set_spot_cred . Run the following command replacing <USERNAME> with your chosen username and <PASSWORD> with your chosen password. ./set_spot_cred -u <USERNAME> -p <PASSWORD> For example, if your username is user123 and your password is pw123 , your command would look like this: ./ set_spot_cred - u user123 - p pw123 Username in Robot Configuration Please ensure that the username for the d.ASH server is the same as the one defined in the robot configuration file - robot_config.json . That is, you would replace <USERNAME> with your chosen username in \"username\" : \"<USERNAME>\" . 2.2 Robot Registration To register the payload computer with d.ASH's backend system, you will need to run the file register_payload . However, you will first need to configure the register_payload_config.json found in the \\dash-sdk\\configs folder of the SDK. Set <ROBOT_NAME> to any name you like, and set <DC_USERNAME> to your dConstruct cloud admin username. For example, if your robot name is robot1 and your cloud admin user name is user123 , your register_payload_config.json would look like this: { RobotName: robot1, RobotUserName: user123 } Now, run the following command to register your robot, replacing <PATH_TO_SDK> with your local path to the d.ASH SDK. ./register_payload -i <PATH_TO_SDK>/dash_sdk/configs/register_payload_config 2.3 d.ASH Autonomy Credentials To set up the local credentials for d.ASH autonomy, you will need to run the file set_autonomy_cred . Run the following command replacing <USERNAME> with your cloud admin username. cd ./ set_auto_cred / build ./ set_autonomy_cred - u < USERNAME > For example, if your username is user123 , your command would look like this: cd ./ set_auto_cred / build ./ set_autonomy_cred - u user123 You will then be prompted to enter a password, which will match your cloud admin password. Enter","title":"2.0 Payload Registration"},{"location":"setup/payload-reg/#payload-registration","text":"Before running the d.ASH SDK, please make sure that all of your credentials have been set up correctly. This means using the right username and the right password. This section of the d.ASH SDK documentation provides details about setting up credentials for the d.ASH server, your robot, and d.ASH autonomy. Files in this section can be found in the folder registration : dash-sdk/ \u2514\u2500 registration \u2514\u2500 set_spot_cred \u2514\u2500 register_payload \u2514\u2500 set_autonomy_cred","title":"Payload Registration"},{"location":"setup/payload-reg/#21-dash-server-credentials","text":"To set up the local credentials for the d.ASH server, you will need to run the file set_spot_cred . Run the following command replacing <USERNAME> with your chosen username and <PASSWORD> with your chosen password. ./set_spot_cred -u <USERNAME> -p <PASSWORD> For example, if your username is user123 and your password is pw123 , your command would look like this: ./ set_spot_cred - u user123 - p pw123 Username in Robot Configuration Please ensure that the username for the d.ASH server is the same as the one defined in the robot configuration file - robot_config.json . That is, you would replace <USERNAME> with your chosen username in \"username\" : \"<USERNAME>\" .","title":"2.1 d.ASH Server Credentials"},{"location":"setup/payload-reg/#22-robot-registration","text":"To register the payload computer with d.ASH's backend system, you will need to run the file register_payload . However, you will first need to configure the register_payload_config.json found in the \\dash-sdk\\configs folder of the SDK. Set <ROBOT_NAME> to any name you like, and set <DC_USERNAME> to your dConstruct cloud admin username. For example, if your robot name is robot1 and your cloud admin user name is user123 , your register_payload_config.json would look like this: { RobotName: robot1, RobotUserName: user123 } Now, run the following command to register your robot, replacing <PATH_TO_SDK> with your local path to the d.ASH SDK. ./register_payload -i <PATH_TO_SDK>/dash_sdk/configs/register_payload_config","title":"2.2 Robot Registration"},{"location":"setup/payload-reg/#23-dash-autonomy-credentials","text":"To set up the local credentials for d.ASH autonomy, you will need to run the file set_autonomy_cred . Run the following command replacing <USERNAME> with your cloud admin username. cd ./ set_auto_cred / build ./ set_autonomy_cred - u < USERNAME > For example, if your username is user123 , your command would look like this: cd ./ set_auto_cred / build ./ set_autonomy_cred - u user123 You will then be prompted to enter a password, which will match your cloud admin password. Enter","title":"2.3 d.ASH Autonomy Credentials"},{"location":"setup/vpn/","text":"Setting Up d.ASH VPN When setting up VPN for d.ASH, two separate login credentials are required for two seperate VPN connections - one for the robot onboard computer and one for the remote client. This section of the d.ASH SDK documentation provides details about setting up the d.ASH VPN for both your robot and your remote client. 3.1 Setting Up VPN Onboard Computer To start, you will need to install some packages to configure automatic VPN connection on Ubuntu 18.04 LTS by executing the following command: sudo apt install network - manager - openvpn network - manager - openvpn - gnome openvpn openvpn - systemd - resolved - y This will install an openvpn package, which creates a /etc/openvpn/client/ directory into which you can place the OpenVPN client configuration file. You will need to configure the VPN configuration file - client.ovpn which can be found in your vpn folder /dash_sdk/vpn . dash-sdk/ \u2514\u2500 vpn/ \u2514\u2500 client.ovpn \u2514\u2500 ca.crt \u2514\u2500 <USER>.crt \u2514\u2500 <USER>.key Note that <USER> in this instance is replaced by your dConstruct admin username. Now, you will need to copy client.ovpn and your user certifications - ca.crt , <USER>.crt , <USER>.key - into the new open vpn directory. In the /dash_sdk directory, execute the following commands: python3 .7 config_vpn . py sudo cp client . ovpn / etc / openvpn / client / client . conf sudo cp ca . crt < USER >. crt < USER >. key / etc / openvpn / client For example, if your dConstruct admin username is user123 , you would replacing <USER> with user123 : sudo cp client . ovpn / etc / openvpn / client / client . conf sudo cp ca . crt user123 . crt user123 . key / etc / openvpn / client To check that your files have been copied and renamed correctly, cd into the /etc/openvpn/client directory and ls to see your list of files. You should have client.conf and your user certification files, namely ca.crt <USER>.crt <USER>.key : etc/ \u2514\u2500 openvpn/ \u2514\u2500 client/ \u2514\u2500 client.conf \u2514\u2500 ca.crt \u2514\u2500 <USER>.crt \u2514\u2500 <USER>.key Now, let's test that the VPN service was set up correctly by running the following command: sudo systemctl start openvpn - client @client . service If there is no error print, proceed onto the next step. If you come across a failure, ensure that the path in client.conf matches the following format: cat \\ etc \\ openvpn \\ client \\ ca . crt cert \\ etc \\ openvpn \\ client \\ < USER >. crt key \\ etc \\ openvpn \\ client \\ < USER >. crt Now, to check your VPN status, enter the following command: sudo systemctl status openvpn - client @client . service If successful, you should be able to see the status Initialization Sequence Completed . Lastly, enable the VPN onboard your computer by executing the following command: sudo systemctl enable openvpn - client @client . service 3.2 Setting Up VPN Remote Client Remember to use a separate login credential from the robot onboard computer credentials as at any point in time, there can only be one active user session. Firstly, download OpenVPN Connect . Once OpenVPN has been launched, click on the tab - 'Import from File' tab and drag-and-drop the client.ovpn file located in \\dash-sdk\\vpn . It is important to note that the client.ovpn file has to be in the same directory as there certification files, namely ca.crt <USER>.crt <USER>.key : dash-sdk/ \u2514\u2500 vpn/ \u2514\u2500 client.ovpn \u2514\u2500 ca.crt \u2514\u2500 <USER>.crt \u2514\u2500 <USER>.key","title":"3.0 Setting up d.ASH VPN"},{"location":"setup/vpn/#setting-up-dash-vpn","text":"When setting up VPN for d.ASH, two separate login credentials are required for two seperate VPN connections - one for the robot onboard computer and one for the remote client. This section of the d.ASH SDK documentation provides details about setting up the d.ASH VPN for both your robot and your remote client.","title":"Setting Up d.ASH VPN"},{"location":"setup/vpn/#31-setting-up-vpn-onboard-computer","text":"To start, you will need to install some packages to configure automatic VPN connection on Ubuntu 18.04 LTS by executing the following command: sudo apt install network - manager - openvpn network - manager - openvpn - gnome openvpn openvpn - systemd - resolved - y This will install an openvpn package, which creates a /etc/openvpn/client/ directory into which you can place the OpenVPN client configuration file. You will need to configure the VPN configuration file - client.ovpn which can be found in your vpn folder /dash_sdk/vpn . dash-sdk/ \u2514\u2500 vpn/ \u2514\u2500 client.ovpn \u2514\u2500 ca.crt \u2514\u2500 <USER>.crt \u2514\u2500 <USER>.key Note that <USER> in this instance is replaced by your dConstruct admin username. Now, you will need to copy client.ovpn and your user certifications - ca.crt , <USER>.crt , <USER>.key - into the new open vpn directory. In the /dash_sdk directory, execute the following commands: python3 .7 config_vpn . py sudo cp client . ovpn / etc / openvpn / client / client . conf sudo cp ca . crt < USER >. crt < USER >. key / etc / openvpn / client For example, if your dConstruct admin username is user123 , you would replacing <USER> with user123 : sudo cp client . ovpn / etc / openvpn / client / client . conf sudo cp ca . crt user123 . crt user123 . key / etc / openvpn / client To check that your files have been copied and renamed correctly, cd into the /etc/openvpn/client directory and ls to see your list of files. You should have client.conf and your user certification files, namely ca.crt <USER>.crt <USER>.key : etc/ \u2514\u2500 openvpn/ \u2514\u2500 client/ \u2514\u2500 client.conf \u2514\u2500 ca.crt \u2514\u2500 <USER>.crt \u2514\u2500 <USER>.key Now, let's test that the VPN service was set up correctly by running the following command: sudo systemctl start openvpn - client @client . service If there is no error print, proceed onto the next step. If you come across a failure, ensure that the path in client.conf matches the following format: cat \\ etc \\ openvpn \\ client \\ ca . crt cert \\ etc \\ openvpn \\ client \\ < USER >. crt key \\ etc \\ openvpn \\ client \\ < USER >. crt Now, to check your VPN status, enter the following command: sudo systemctl status openvpn - client @client . service If successful, you should be able to see the status Initialization Sequence Completed . Lastly, enable the VPN onboard your computer by executing the following command: sudo systemctl enable openvpn - client @client . service","title":"3.1 Setting Up VPN Onboard Computer"},{"location":"setup/vpn/#32-setting-up-vpn-remote-client","text":"Remember to use a separate login credential from the robot onboard computer credentials as at any point in time, there can only be one active user session. Firstly, download OpenVPN Connect . Once OpenVPN has been launched, click on the tab - 'Import from File' tab and drag-and-drop the client.ovpn file located in \\dash-sdk\\vpn . It is important to note that the client.ovpn file has to be in the same directory as there certification files, namely ca.crt <USER>.crt <USER>.key : dash-sdk/ \u2514\u2500 vpn/ \u2514\u2500 client.ovpn \u2514\u2500 ca.crt \u2514\u2500 <USER>.crt \u2514\u2500 <USER>.key","title":"3.2 Setting Up VPN Remote Client"}]}